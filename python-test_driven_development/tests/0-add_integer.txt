How to use 0-add_integer.py

This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

    ``add_integer(...)``` returns the addition of its two arguments. For numbers,
    that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(1, 2)
    3

    This function can take negative integers.
::

    >>> add_integer(100, -2)
    98


    b by default is 98.
::

    >>> add_integer(2)
    100


    The function can take a floating number as an arguments but it changes it to an integer
::

    >>> add_integer(100.3, -2)
    98

    The function only takes integers or floats as arguments
::

    >>> add_integer(4, "School")
    Traceback (most recent call last):
    TypeError: b must be an integer


::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
